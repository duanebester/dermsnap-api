// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	models "dermsnap/models"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CreateUserInfo defines model for CreateUserInfo.
type CreateUserInfo = models.CreateUserInfo

// Error defines model for Error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// IdentifierType defines model for IdentifierType.
type IdentifierType = models.IdentifierType

// Role defines model for Role.
type Role = models.Role

// User defines model for User.
type User = models.User

// UserInfo defines model for UserInfo.
type UserInfo = models.UserInfo

// UserId defines model for user_id.
type UserId = openapi_types.UUID

// CreateUserInfoJSONRequestBody defines body for CreateUserInfo for application/json ContentType.
type CreateUserInfoJSONRequestBody = CreateUserInfo

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get current user
	// (GET /me)
	Me(c *fiber.Ctx) error
	// Get user info
	// (GET /users/{user_id}/user-info)
	GetUserInfo(c *fiber.Ctx, userId UserId) error
	// Create user info
	// (POST /users/{user_id}/user-info)
	CreateUserInfo(c *fiber.Ctx, userId UserId) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// Me operation middleware
func (siw *ServerInterfaceWrapper) Me(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.Me(c)
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUserInfo(c, userId)
}

// CreateUserInfo operation middleware
func (siw *ServerInterfaceWrapper) CreateUserInfo(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateUserInfo(c, userId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/me", wrapper.Me)

	router.Get(options.BaseURL+"/users/:user_id/user-info", wrapper.GetUserInfo)

	router.Post(options.BaseURL+"/users/:user_id/user-info", wrapper.CreateUserInfo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/jNhD9K8a0RzlSkvaiW/oVuEWRoEnQg2EEjDSWGEgkd0hl4zX03xdDyrYsO4mx",
	"8QJ7yMmWyBm+efP4Rkt4EBavhSshhVgYCRFkujZaoXIW0iUYQaJGh+SfGot0L3P+m6PNSBontYIUbksc",
	"8eJo8gdEIPmV4awRKFEjpOvICAg/NZIwh9RRgxHYrMRacMq5plo43tz4nW5hONQ6kqqAtm1Xmz2W3wmF",
	"wzuLNFFz7bGSNkhOol8XBW4llcqdn22ySuWwQII2ggJVjrS1uTtzB0MEJcqidAdm/nz45rbPzNSjXx+2",
	"TrTGOlsn0A+PmPHK87jQ4+5lrXOs7MmAot6esayNJo+sa1AIgSj0LYUcqbZKmLhbYIB/EmnaZbpGazu2",
	"hy0bwmwjmOSonJxLpFu/tARUTe1rNqbiqnP9LGvpFlyu1kWFvXLXjdlT7iDzu8v9T1fb+PJaKo8vc5og",
	"8qI+EJvP9W5E3Mpd/sOFfOP2RCDX9OzpVH/53nWN+ZlwDin8FG88Ie5uYDwgm+Xb0fValKdhqPVgC4Gg",
	"HshdSIep3pN0FKpfMJaqupq/Vejg6nl+D+pSz2Lf8sM9LG5s9igGcizrYOfGrCHpFjdMUCDyAQUhXTQc",
	"tHr6a1Xz3//fQuf3fEZY3ZBQOmdCYtk1yUnH+oOL6wlE8IRkw2g6PUlOEmZWG1Q84lI4968CXo8krr1y",
	"C/RlcbMFD7ZJDin8i35oWaOVDbjPkoR/Mq0cKh/BziUzHxM/Wj522Ztrr+nEi9XXsT1Qr/5hyL8kp0c7",
	"KZj3nqPulGhcqUl+wZwP/fWI5b146EQ5JCWq0Q3SE9JotXEjFEin2xKZztpZBLapa0ELSOES3ShriFA5",
	"/+3ho2P+Z+NldxFa/zxeaWRvgy/R9XT+XTsdvOCj29/Ybf+FKTs/7X+ZTvfj2myJV8bISY22e2Sw87HE",
	"5orW/abzxdEYGo6FNrj4h+R+RMmFZvVVF8I5XxBdQ1U3i9I4rnQmqlJbl54nSQLtrP0aAAD//9VVpqpf",
	"DQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
