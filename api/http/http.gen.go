// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	models "dermsnap/models"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CreateDoctorInfo defines model for CreateDoctorInfo.
type CreateDoctorInfo = models.CreateDoctorInfo

// CreateUserInfo defines model for CreateUserInfo.
type CreateUserInfo = models.CreateUserInfo

// DoctorInfo defines model for DoctorInfo.
type DoctorInfo = models.DoctorInfo

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// IdentifierType defines model for IdentifierType.
type IdentifierType = models.IdentifierType

// Role defines model for Role.
type Role = models.Role

// User defines model for User.
type User = models.User

// UserInfo defines model for UserInfo.
type UserInfo = models.UserInfo

// UserId defines model for user_id.
type UserId = openapi_types.UUID

// CreateDoctorInfoJSONRequestBody defines body for CreateDoctorInfo for application/json ContentType.
type CreateDoctorInfoJSONRequestBody = CreateDoctorInfo

// CreateUserInfoJSONRequestBody defines body for CreateUserInfo for application/json ContentType.
type CreateUserInfoJSONRequestBody = CreateUserInfo

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get current user
	// (GET /me)
	Me(c *fiber.Ctx) error
	// Get doctor info
	// (GET /users/{user_id}/doctor-info)
	GetDoctorInfo(c *fiber.Ctx, userId UserId) error
	// Create doctor info
	// (POST /users/{user_id}/doctor-info)
	CreateDoctorInfo(c *fiber.Ctx, userId UserId) error
	// Get user info
	// (GET /users/{user_id}/user-info)
	GetUserInfo(c *fiber.Ctx, userId UserId) error
	// Create user info
	// (POST /users/{user_id}/user-info)
	CreateUserInfo(c *fiber.Ctx, userId UserId) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// Me operation middleware
func (siw *ServerInterfaceWrapper) Me(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.Me(c)
}

// GetDoctorInfo operation middleware
func (siw *ServerInterfaceWrapper) GetDoctorInfo(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetDoctorInfo(c, userId)
}

// CreateDoctorInfo operation middleware
func (siw *ServerInterfaceWrapper) CreateDoctorInfo(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateDoctorInfo(c, userId)
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUserInfo(c, userId)
}

// CreateUserInfo operation middleware
func (siw *ServerInterfaceWrapper) CreateUserInfo(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateUserInfo(c, userId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/me", wrapper.Me)

	router.Get(options.BaseURL+"/users/:user_id/doctor-info", wrapper.GetDoctorInfo)

	router.Post(options.BaseURL+"/users/:user_id/doctor-info", wrapper.CreateDoctorInfo)

	router.Get(options.BaseURL+"/users/:user_id/user-info", wrapper.GetUserInfo)

	router.Post(options.BaseURL+"/users/:user_id/user-info", wrapper.CreateUserInfo)

}

type MeRequestObject struct {
}

type MeResponseObject interface {
	VisitMeResponse(ctx *fiber.Ctx) error
}

type Me200JSONResponse User

func (response Me200JSONResponse) VisitMeResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type Me401JSONResponse Error

func (response Me401JSONResponse) VisitMeResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type Me500JSONResponse Error

func (response Me500JSONResponse) VisitMeResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetDoctorInfoRequestObject struct {
	UserId UserId `json:"user_id"`
}

type GetDoctorInfoResponseObject interface {
	VisitGetDoctorInfoResponse(ctx *fiber.Ctx) error
}

type GetDoctorInfo200JSONResponse DoctorInfo

func (response GetDoctorInfo200JSONResponse) VisitGetDoctorInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetDoctorInfo401JSONResponse Error

func (response GetDoctorInfo401JSONResponse) VisitGetDoctorInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetDoctorInfo500JSONResponse Error

func (response GetDoctorInfo500JSONResponse) VisitGetDoctorInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type CreateDoctorInfoRequestObject struct {
	UserId UserId `json:"user_id"`
	Body   *CreateDoctorInfoJSONRequestBody
}

type CreateDoctorInfoResponseObject interface {
	VisitCreateDoctorInfoResponse(ctx *fiber.Ctx) error
}

type CreateDoctorInfo200JSONResponse DoctorInfo

func (response CreateDoctorInfo200JSONResponse) VisitCreateDoctorInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateDoctorInfo401JSONResponse Error

func (response CreateDoctorInfo401JSONResponse) VisitCreateDoctorInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type CreateDoctorInfo500JSONResponse Error

func (response CreateDoctorInfo500JSONResponse) VisitCreateDoctorInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetUserInfoRequestObject struct {
	UserId UserId `json:"user_id"`
}

type GetUserInfoResponseObject interface {
	VisitGetUserInfoResponse(ctx *fiber.Ctx) error
}

type GetUserInfo200JSONResponse UserInfo

func (response GetUserInfo200JSONResponse) VisitGetUserInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetUserInfo401JSONResponse Error

func (response GetUserInfo401JSONResponse) VisitGetUserInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetUserInfo500JSONResponse Error

func (response GetUserInfo500JSONResponse) VisitGetUserInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type CreateUserInfoRequestObject struct {
	UserId UserId `json:"user_id"`
	Body   *CreateUserInfoJSONRequestBody
}

type CreateUserInfoResponseObject interface {
	VisitCreateUserInfoResponse(ctx *fiber.Ctx) error
}

type CreateUserInfo200JSONResponse UserInfo

func (response CreateUserInfo200JSONResponse) VisitCreateUserInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateUserInfo401JSONResponse Error

func (response CreateUserInfo401JSONResponse) VisitCreateUserInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type CreateUserInfo500JSONResponse Error

func (response CreateUserInfo500JSONResponse) VisitCreateUserInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get current user
	// (GET /me)
	Me(ctx context.Context, request MeRequestObject) (MeResponseObject, error)
	// Get doctor info
	// (GET /users/{user_id}/doctor-info)
	GetDoctorInfo(ctx context.Context, request GetDoctorInfoRequestObject) (GetDoctorInfoResponseObject, error)
	// Create doctor info
	// (POST /users/{user_id}/doctor-info)
	CreateDoctorInfo(ctx context.Context, request CreateDoctorInfoRequestObject) (CreateDoctorInfoResponseObject, error)
	// Get user info
	// (GET /users/{user_id}/user-info)
	GetUserInfo(ctx context.Context, request GetUserInfoRequestObject) (GetUserInfoResponseObject, error)
	// Create user info
	// (POST /users/{user_id}/user-info)
	CreateUserInfo(ctx context.Context, request CreateUserInfoRequestObject) (CreateUserInfoResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Me operation middleware
func (sh *strictHandler) Me(ctx *fiber.Ctx) error {
	var request MeRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Me(ctx.UserContext(), request.(MeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Me")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(MeResponseObject); ok {
		if err := validResponse.VisitMeResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDoctorInfo operation middleware
func (sh *strictHandler) GetDoctorInfo(ctx *fiber.Ctx, userId UserId) error {
	var request GetDoctorInfoRequestObject

	request.UserId = userId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetDoctorInfo(ctx.UserContext(), request.(GetDoctorInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDoctorInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetDoctorInfoResponseObject); ok {
		if err := validResponse.VisitGetDoctorInfoResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateDoctorInfo operation middleware
func (sh *strictHandler) CreateDoctorInfo(ctx *fiber.Ctx, userId UserId) error {
	var request CreateDoctorInfoRequestObject

	request.UserId = userId

	var body CreateDoctorInfoJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDoctorInfo(ctx.UserContext(), request.(CreateDoctorInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDoctorInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateDoctorInfoResponseObject); ok {
		if err := validResponse.VisitCreateDoctorInfoResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUserInfo operation middleware
func (sh *strictHandler) GetUserInfo(ctx *fiber.Ctx, userId UserId) error {
	var request GetUserInfoRequestObject

	request.UserId = userId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserInfo(ctx.UserContext(), request.(GetUserInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetUserInfoResponseObject); ok {
		if err := validResponse.VisitGetUserInfoResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateUserInfo operation middleware
func (sh *strictHandler) CreateUserInfo(ctx *fiber.Ctx, userId UserId) error {
	var request CreateUserInfoRequestObject

	request.UserId = userId

	var body CreateUserInfoJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUserInfo(ctx.UserContext(), request.(CreateUserInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUserInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateUserInfoResponseObject); ok {
		if err := validResponse.VisitCreateUserInfoResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYUW/bNhD+K8Ztj0rkNtuL3rp1K7xhaLGm2EMQFIx0lllIJHc8dfUM/ffhSNmWbCXx",
	"agXoQ94k8Xj8+N13H2lv4E55fKd4BRmkymlIILe1swYNe8g24BSpGhkpvDUe6aMu5LFAn5N2rK2BDK5X",
	"OJPB2eI1JKDlk5OsCRhVI2S7mQkQ/t1owgIypgYT8PkKayUpl5ZqxRLchEheO5nqmbQpoW3bbXDA8jOh",
	"Ynxtc7a0MEsb0JJ1SKwxROSEBRrWqgqvB+kS8A5zrSpej4y2faA3vdBkkPZ2h9LefcKcIYEvF6W96D7W",
	"tsDKXx5B7UVd6NpZYoHQURUnQRIZzKBAqr1RLu0GBFvM+MHjPVtXJQ4Y1YavXu4p1YaxRBISSjQF0iC4",
	"4yA5ZmyFulzxiZn/OT34gG1Bv1tsl2iH9f+QvqPobMrPUVpsmUf0/bAgk37zPdYpQzpDyL4Bz9PylCr+",
	"hcjSMZs1et8J+OGNbQOPkLcJLMK+lhrpOgxtAE1TB3U5V4m+CvtF1zrQUFpbVv08uxYYYeAg89ks/Gmr",
	"Ib6i1ibgE6a70p2ILeQ6G5E0zXFZThSx3tFzTytshz9yV5jvCZeQwXfp/uhJO6NPD8gWAXR0PTQr0DDa",
	"BhQJ6oE8hnRaIwSSJqH6HguvqrfLxzZ6YHKnW81UZjKJVU9l0mKhmDekef1eCIpE3qEipFeNTNq+/brd",
	"829/XUN3rZA14uiehBWzi4l1VyTWLPqDV+8WkMBnJB9vQC8u55dzYdY6NHKTyuAqfIp4A5K0DsotMWxL",
	"iq3k/rQoIIM/MNyNvLPGR9wv5/NwtljDaMIMcS6dhznpJy/LbnrXp4d0EsQa9jG8t739XSD/MH8x2UrR",
	"00eW+mBUwytL+l8sZNEfJ9zevYsuDCMZVc3eI31Gmm0D90KB7GYokZvb9jYB39S1ojVk8AZ5ljdEaDhc",
	"ccPsVJ58uukaoU2jWV9sVTJa4jfIg9PzyardW+W55l9b81jRme58tf9D6GYc2T4k3RqkpHXWj4hh5DeB",
	"2Cx6/skW68lYOlqmbaOjP0vv25ReLNhQfWOGIw+P2k3vYH3So+W53mdZTfjn5GmNZqCEp7KZvhTaZ8l9",
	"4xbTU12cLvmi6BqqustvlqaVzVW1sp6zq/l8Du1t+18AAAD//7Wp3EU3FAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
